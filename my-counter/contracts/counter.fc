#include "imports/stdlib.fc";

{- 
    - recv_internal function is called to process the inline call with other smart contract
    - impure specifier is used for functions which modify the state of contract 
-}
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; throw_if function is used for throwing the excecption
    ;; first parameter is error code and secode parameter is condition
    throw_if(35, in_msg_body.slice_bits() < 32);
    
    int n = in_msg_body~load_uint(32); ;; load_uint(32) funnction is load data of message body. ~ operator is to allow the load_uint function modify the first argument

    slice ds = get_data().begin_parse();  ;; get_data() function is used for getting datas of permanent data of contract storage
    int total = ds~load_uint(64); ;; here total get the value of 64 bit of ds. After executing this, ds has only other arguments excepting the first argument.

    total += n;

    ;; set_data function stores the value to permanent storage of contract
    ;; begin_cell() function initiate the process building a new cell to store the value
    ;; store_uint function stores the u integer to builder. First paramter is value and second paramter is length
    ;; end_cell finalize the builder and converts it to a cell.
    set_data(begin_cell().store_uint(total, 64).end_cell());
}


;; get_total function is user-defined function
;; method_id specifier allows this function can be called by its name externally. It is similar with 'public' or 'external' on solidity
int get_total() method_id { 
    slice ds = get_data().begin_parse();
    int total = ds~load_uint(64);

    return total;
}

